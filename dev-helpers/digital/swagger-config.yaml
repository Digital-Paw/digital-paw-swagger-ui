openapi: "3.0.0"
info:
  version: "0.0.1"
  title: "Swagger UI Webpack Setup"
  description: "Demonstrates Swagger UI with Webpack including CSS and OAuth"
servers:
  - url: "https://demo.identityserver.io/api"
    description: "Identity Server test API"
components:
  schemas:
    LoginAccount:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: The user's email address.
          format: email
          example: "user@example.com"
        password:
          type: string
          description: The user's password.
          format: password
          example: "password123"
    LoginToken:
      type: object
      properties:
        idToken:
          type: string
          description: JWT token used to authenticate the user.
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          description: Token used to refresh the `idToken` when it expires.
          example: "def50200bb..."
        expiresIn:
          type: integer
          description: Time in seconds until the `idToken` expires.
          example: 3600
    CreateAccount:
      type: object
      required:
        - email
        - password
        - repeatPassword
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: "password123"
        repeatPassword:
          type: string
          format: password
          example: "password123"
    PersonalData:
      type: object
      required:
        - name
        - lastName
        - callingCode
        - phoneNumber
      properties:
        name:
          type: string
          description: Name of user
          example: "Doe"
        firstName:
          type: string
          description: Last name of user
          example: "John"
        callingCode:
          type: string
          description: Calling code for phone number
          example: "+51"
        phoneNumber:
          type: string
          description: Phone number of user
          example: "1234567890"
    PhoneCode:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          description: The verification code sent to the user's phone.
          example: "123456"
    EmailCode:
      type: object
      required:
        - code
        - password
        - repeatPassword
      properties:
        code:
          type: string
          description: The verification code sent to the user's email.
          example: "123456"
        password:
          type: string
          format: password
          example: "password123"
        repeatPassword:
          type: string
          format: password
          example: "password123"
    PhoneSend:
      type: object
      required:
        - channel
      properties:
        channel:
          type: string
          description: The channel through which the verification code will be sent (e.g., SMS, email).
          enum:
            - SMS
            - WHATSAPP
    AccessToken:
      type: object
      properties:
        access_token:
          type: string
          description: Access token.
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expires_in:
          type: integer
          description: Expiration time in seconds.
          example: 3600
        refresh_token:
          type: string
          description: Refresh token.
          example: "def50200bb..."
    PetType:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the pet type.
          example: 1
        name:
          type: string
          description: The name of the pet type.
          example: "Dog"
        breeds:
          type: array
          description: A list of breeds associated with the pet type.
          items:
            $ref: '#/components/schemas/PetBreed'
    PetBreed:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the pet breed.
          example: 101
        name:
          type: string
          description: The name of the pet breed.
          example: "Golden Retriever"
    PetRequest:
      type: object
      required:
        - name
        - petBreedId
      properties:
        name:
          type: string
          description: The name of the pet.
        alias:
          type: string
          description: An optional alias for the pet.
        petBreedId:
          type: integer
          description: The identifier for the pet breed.
        birthDate:
          type: string
          format: date
          description: An optional birth date of the pet (YYYY-MM-DD).
        gender:
          type: string
          description: An optional gender of the pet.
          enum:
            - male
            - female
            - unknown
    PetResponse:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the pet
          example: 101
        name:
          type: string
          description: The name of the pet.
        alias:
          type: string
          description: An optional alias for the pet.
        breed:
          type: string
          description: Breed for pet
        birthDate:
          type: string
          format: date
          description: An optional birth date of the pet (YYYY-MM-DD).
        gender:
          type: string
          description: An optional gender of the pet.
          enum:
            - male
            - female
            - unknown
    PasswordRecover:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: The email address associated with the user account. 
    Error:
      type: object
      required:
        - code
        - reason
        - source
      properties:
        code:
          description: Error code
          type: string
          example: "001400"
        reason:
          description: Reason of error
          type: string
          example: CREATE_ERROR
        source:
          description: Source of error
          type: string
          example: BUSSINESS_SERVICE
  securitySchemes:
    # See https://demo.identityserver.io/ for configuration details.
    identity_server_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: "https://demo.identityserver.io/connect/authorize"
          scopes:
            api: "api"
security:
  - identity_server_auth:
    - api
paths:
  /pet-parent/login:
    post:
      summary: User Login
      description: Authenticates a user and returns tokens for session management.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginAccount'
      responses:
        200:
          description: Authentication successful. Returns tokens for session management.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginToken'
        400:
          description: Invalid request. Missing or incorrect email or password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized. Invalid email or password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pet-parent/ob/create-account:
    post:
      summary: Create account for pet parent
      description: Create account a user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccount'
      responses:
        200:
          description: Create account ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        404:
          description: Error create account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pet-parent/ob/personal-data:
    post:
      summary: Save personal data
      description: Save personal data to user, name, lastName and phoneNumber
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalData'
      responses:
        200:
          description: The spacecraft corresponding to the provided `spacecraftId`
          content: {}
        404:
          description: Error save personal data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pet-parent/ob/phone-number/code/verify:
    post:
      summary: Phone Number Verification
      description: Verifies a phone number using a verification code.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneCode'
      responses:
        200:
          description: Verification successful. Empty response.
          content: {}
        400:
          description: Invalid request. The verification code is incorrect or missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pet-parent/ob/phone-number/code/send:
    post:
      summary: Send Verification Code
      description: Sends a verification code to the user's phone number via a specified channel.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneSend'
      responses:
        200:
          description: Code sent successfully. Empty response.
          content: {}
        400:
          description: Invalid request. The verification code is incorrect or missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pet-parent/pet-type:
    get:
      summary: Get Pet Types and Breeds
      description: Retrieves a list of pet types, each with its corresponding breeds.
      responses:
        200:
          description: A list of pet types with their respective breeds.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PetType'
        500:
          description: Server error. An unexpected error occurred while processing the request.
  /pet-parent/pet:
    post:
      summary: Create a new pet
      description: This endpoint allows the creation of a new pet under a pet parent.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetRequest'
      responses:
        200:
          description: Pet created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetResponse'
        404:
          description: Error create pet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pet-parent/pet/{petId}:
    parameters:
      - name: petId
        description: The unique identifier of the pet.
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve pet details
      description: This endpoint retrieves the details of a pet by its ID.
      responses:
        200:
          description: A pet object containing detailed information about the pet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetResponse'
        404:
          description: Pet not found.
  /pet-parent/account/password-recover:
    post:
      summary: Request password recovery
      description: This endpoint allows a user to request a password recovery link by providing their email address.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordRecover'
      responses:
        '204':
          description: No Content - Password recovery link sent successfully.
  /pet-parent/recover-password:
    post:
      summary: Email verified
      description: Verifies a email for recover password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailCode'
      responses:
        200:
          description: Verification successful. Password recover.
          content: {}
        400:
          description: Invalid request. The verification code is incorrect or missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'